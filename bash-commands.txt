> STDIN / STDOUT / STDERR / IO REDIRECTION
------------------------------------------
ls                            # Lists files and folder in a directory.
ls > output                   # Writes the results to a file called "output". OVERWRITES if used again on the same file.
cat output                    # Print the result from the ls command that is stored in the output file.

who                           # Show users that are logged in.
who >> output                 # Two ">>" writes the result to the output file but it doesn't OVERWRITE, it APPENDS to the file.

grep root /etc/*              # Shows output with errors ("Permission denied" entries).
grep root /etc/* 2>/dev/null  # Removes the errors. /dev/null = A special device that discards the previous errors.

sudo -i                       # Open a root shell.
ps aux                        # List all running processes.

ls /proc/                     # Lists what the kernel is doing.
ls /proc/<process_id>         # Lists the details of what a specific process is doing.
ls -l /proc/<process_id>/fd   # Lists the file descriptor of a specific process id. Here you can see what a process is connected to; sockets, logs and so on.

ps aux | less                 # Pipes "ps aux" to the "less" command.
man -k user                   # Searches man pages for the keyword "user", creates a lot of results!
man -k user | grep 8          # Searches man pages for the keyword "user" but only shows results from chapter 8 (sysadmin commands).

> INTERNAL COMMANDS
-------------------
help                          # Shows the internal commands.
help <command>                # Shows how to use the specific command.

> VARIABLES
-----------
echo $SHELL                   # Shows the name / path of the current shell.

myvar=green                   # Creates a local variable called "myvar" with the value "green".
echo $myvar                   # Prints "green".
echo ${myvar}1                # Prints "green1". Appends the "1" to the variable.

export mynewvar=red           # Creates a global variable called "mynewvar" with the value "red".
bash                          # Opens a new subshell.
echo $mynewvar                # The var created in the previous shell will now exist in this subshell and print "red".
                              # Create variables in the bash startup file to make variables available in all shells.

> ALIAS
-------
alias                         # Shows all the current aliases. An alias is used to define your own commands. Not advisable to use in public scripts.
alias bashinfo='man bash'     # Creates an alias called "bashinfo" which will run the command "man bash" if the user types "bashinfo".
unalias bashinfo              # Removes the alias.

> USE BASH STARTUP FILES
------------------------
/etc/profile                  # Generic startup file for every login shell.
/etc/bashrc                   # Generic startup file for opening a subshell.
~/.bash_profile OR ~/.bashrc  # User specific files for subshells. May be different depending on distro.

> EXIT CODES
------------
echo $?                       # Shows the last exit code. 0 = Successful exit code, 1 = Generic error. May be other codes, it's up to the developer.

ls                            # Lists the content of the directory.
echo $?                       # Prints 0
ls rgsripgipgpon4np4s         # Will print "cannot access..."
echo $?                       # Prints 2

Exit codes might be explained in man pages.

> ECHO
------
echo -e                       # The -e flag is used to get the correct formatting of commands such as "\b" and "\n".
\b                            # Backspace.
\n                            # New line.

> PRINTF
--------
Used in C programming and has more formatting options than echo.

%s                            # Treat arguments as strings.
%d                            # Treat arguments as integers.
%f                            # Treat arguments as floats.

printf "%s\n" 255 0xff 0377   # Prints each argument on a new line. All arguments are different ways of specifying the number 255.
0xff                          # Hexadecimal for 255.
0377                          # Octal number
printf "%d\n" 255 0xff 0377   # Interprets the arguments as digits and prints "255" "255" "255"

> BASH OPTIONS
--------------
set                           # Configure a shell.
shopt                         # Shows all additional options and it's current status (off / on).
sex -x                        # Prints the executed command before the result. Test with "ls" for example.

> PATTERNS
----------
globbing                      # Used for file patterns in bash.
globbing: *                   # Matches zero or more characters. For example: "ls *.txt" lists only .txt files withing the current directory.
globbing: ?                   # Matches any single character.
globbing: [...]               # Matches any of the characters listed.

shopt +s extglob              # Enables extended globbing which provides additional pattern options.
?                             # Matches zero or one occurance.
*                             # Matches zero or more occurances.
+                             # Mathces one or more occurances.
@                             # Matches one occurance.

> GREP
------
ps aux | grep '$USER'              # Print all processes ran by $USER.
grep 'root' /etc/*                 # Searches and prints the occurance of the text "root" in /etc/.
grep 'root' /etc/* 2>/dev/null     # Discard any errors from the previous output.
grep -l 'root' /etc/* 2>/dev/null  # Formats the output to a more simplified list.
grep -A 1                          # Include 1 line after the specified search.
grep -B 1                          # Include 1 line before the specified search.
grep -r                            # Recursive search to include subdirectories.

> REGULAR EXPRESSIONS
---------------------
man 7 regex                   # man pages for the regular expressions.
grep -E                       # Extended regular expressions. (Doesn't always work)

grep '^l' <file>              # Search text lines that start with the letter "l".
grep '^fin$' <file>           # $ = Line that ends with. Filters the output.
grep '^fin\b' <file>          # \b = Word that ends with. Filters the output.

grep 'b.*t' <file>            # . = any char. * = any or more times. Filters the output to include anything that starts with "b" and ends with "t".
grep -E 'bo+t' <file>         # An extended expression. Filters output to print results with one or more "o's".

> CUT AND SORT
--------------
cut                           # Filter out fields.
cut -d : -f 3 /etc/passwd     # Filter and sort output from the 3rd column.
sort -n / -d                  # "-n" for numeric order, -d for dictionary order.
                              # sort without any flag(s) will order the output based on the first chracter. For example: "5, 55, 5900, 6, 71, 8..."

awk can be used for more anvanced options.

> TAIL AND HEAD
---------------
tail -3 /etc/passwd           # Print the last 3 lines from the directory. ("-n 3" will have the same result.)
                              # tail on its own shows the last 10 lines by default.
tail -3 /etc/passwd | head -1 # Prints the first line from the last 3 lines fetched by "tail".

> SED
-----
A stream editor for editing files. Print, substitute, edit, delete.

sed -n 3p /etc/passwd           # Prints the 3rd line of /etc/passwd.
sed -i '$a\Append text' <file>  # Append text to the end of a file.
sed -i 's/word1/word2' <file>   # Replace word1 with word2. add "/g" to change all occurances of a pattern or word instead of just the first one.
sed -i -e '2d' <file>           # -i = interractive, -e to edit, "2d" to delete the second line.

> AWK
-----
Another way to filter text.

awk -F : '{ print $4 }' /etc/passwd  # Prints the 4th element or column of /etc/passwd. "-F :" is used to set the field separator.

> EXTERNAL TOOLS
----------------
- Prefer internal tools.
- External tools are slower since they need to be fetched from disk.
- Use "type" to find out if a tool is external or not. For example: "type cd"
- Use "time <script.sh> to measure the time it takes to run a script. Good for optimizing.

ldd $(which awk)                # See dependencies of a awk or any tool.


>
-------------
